{
  "MicrosoftSecurityIncidentCreation": [
    {
      "productFilter": "Azure Security Center",
      "severitiesFilter": [
        "Low",
        "Medium",
        "High"
      ],
      "displayNamesFilter": null,
      "displayNamesExcludeFilter": null,
      "displayName": "Create incidents based on Microsoft Defender for Cloud",
      "enabled": true,
      "description": "Create incidents based on all alerts generated in Microsoft Defender for Cloud",
      "alertRuleTemplateName": null,
      "lastModifiedUtc": "2023-01-13T18:28:01.8275801Z",
      "name": "d40f490f-2806-4fc4-a01c-de1398f24417",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/d40f490f-2806-4fc4-a01c-de1398f24417",
      "kind": "MicrosoftSecurityIncidentCreation",
      "playbookName": ""
    },
    {
      "productFilter": "Azure Active Directory Identity Protection",
      "severitiesFilter": null,
      "displayNamesFilter": null,
      "displayNamesExcludeFilter": null,
      "displayName": "Alert from Identity Protection",
      "enabled": false,
      "description": "",
      "alertRuleTemplateName": null,
      "lastModifiedUtc": "2023-09-20T17:08:28.0867715Z",
      "name": "3159c0c8-ba60-45da-a481-689f91fb58d4",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/3159c0c8-ba60-45da-a481-689f91fb58d4",
      "kind": "MicrosoftSecurityIncidentCreation",
      "playbookName": ""
    },
    {
      "productFilter": "Microsoft Defender Advanced Threat Protection",
      "severitiesFilter": null,
      "displayNamesFilter": null,
      "displayNamesExcludeFilter": null,
      "displayName": "Create Incident from Microsoft Defender for Endpoint",
      "enabled": false,
      "description": "Create Incident from Microsoft Defender for Endpoint",
      "alertRuleTemplateName": null,
      "lastModifiedUtc": "2023-10-20T18:52:33.7465989Z",
      "name": "69d558fa-8979-4e4b-b1ed-5f79e0ba03be",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/69d558fa-8979-4e4b-b1ed-5f79e0ba03be",
      "kind": "MicrosoftSecurityIncidentCreation",
      "playbookName": ""
    },
    {
      "productFilter": "Azure Security Center for IoT",
      "severitiesFilter": null,
      "displayNamesFilter": null,
      "displayNamesExcludeFilter": null,
      "displayName": "test create a new incident rule for iot",
      "enabled": true,
      "description": "test create a new incident rule",
      "alertRuleTemplateName": null,
      "lastModifiedUtc": "2023-04-11T22:07:27.3566915Z",
      "name": "7f1a3966-3c16-4bc1-b470-b0d59859d4b0",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/7f1a3966-3c16-4bc1-b470-b0d59859d4b0",
      "kind": "MicrosoftSecurityIncidentCreation",
      "playbookName": ""
    }
  ],
  "Fusion": [
    {
      "displayName": "Advanced Multistage Attack Detection",
      "description": "Microsoft Sentinel uses Fusion, a correlation engine based on scalable machine learning algorithms, to automatically detect multistage attacks by identifying combinations of anomalous behaviors and suspicious activities that are observed at various stages of the kill chain. On the basis of these discoveries, Azure Sentinel generates incidents that would otherwise be very difficult to catch. By design, these incidents are low-volume, high-fidelity, and high-severity, which is why this detection is turned ON by default.\n\nSince Fusion correlates multiple signals from various products to detect advanced multistage attacks, successful Fusion detections are presented as Fusion incidents on the Microsoft Sentinel Incidents page. This rule covers the following detections:\n- Fusion for emerging threats\n- Fusion for ransomware\n- Scenario-based Fusion detections (122 scenarios)\n\nTo enable these detections, we recommend you configure the following data connectors for best results:\n- Out-of-the-box anomaly detections\n- Microsoft Entra ID Protection\n- Azure Defender\n- Azure Defender for IoT\n- Microsoft 365 Defender\n- Microsoft Cloud App Security    \n- Microsoft Defender for Endpoint\n- Microsoft Defender for Identity\n- Microsoft Defender for Office 365\n- Scheduled analytics rules, both built-in and those created by your security analysts. Analytics rules must contain kill-chain (tactics) and entity mapping information in order to be used by Fusion.\n\nFor the full description of each detection that is supported by Fusion, go to https://aka.ms/SentinelFusion.",
      "alertRuleTemplateName": "f71aba3d-28fb-450b-b192-4e76a83015c8",
      "tactics": [
        "Collection",
        "CommandAndControl",
        "CredentialAccess",
        "DefenseEvasion",
        "Discovery",
        "Execution",
        "Exfiltration",
        "Impact",
        "InitialAccess",
        "LateralMovement",
        "Persistence",
        "PrivilegeEscalation"
      ],
      "severity": "High",
      "enabled": true,
      "lastModifiedUtc": "2022-11-29T16:33:25.9006687Z",
      "name": "BuiltInFusion",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/BuiltInFusion",
      "kind": "Fusion",
      "playbookName": ""
    }
  ],
  "MLBehaviorAnalytics": [],
  "Scheduled": [
    {
      "queryFrequency": "PT5M",
      "queryPeriod": "P1D",
      "triggerOperator": "GreaterThan",
      "triggerThreshold": 0,
      "eventGroupingSettings": {
        "aggregationKind": "SingleAlert"
      },
      "severity": "High",
      "query": "// OBJECT ID of AAD Groups can be found by navigating to Azure Active Directory then from menu on the left, select Groups and from the list shown of AAD Groups, the Second Column shows the ObjectID of each\nlet queryperiod= 1d;\nlet GroupIDs = dynamic([\"List with Custom AAD GROUP OBJECT ID 1\",\"Custom AAD GROUP OBJECT ID 2\"]);\nAuditLogs\n| where TimeGenerated > ago(queryperiod)\n| where OperationName in ('Add member to group', 'Add owner to group')\n| extend InitiatedByActionUserInformation = iff(isnotempty(InitiatedBy.user.userPrincipalName), InitiatedBy.user.userPrincipalName, InitiatedBy.app.displayName)\n| extend InitiatedByIPAdress = InitiatedBy.user.ipAddress \n// Uncomment the following line to filter events where the inviting user was a guest user\n//| where InitiatedBy has_any (\"CUSTOM DOMAIN NAME#\", \"#EXT#\")\n| extend InvitedUser = TargetResources[0].userPrincipalName\n| extend AADGroup = TargetResources[0].modifiedProperties[1].newValue\n| where InvitedUser has_any (\"CUSTOM DOMAIN NAME#\", \"#EXT#\")\n| mv-expand AADGroup = TargetResources[1].id to typeof(string)\n| where AADGroup !in (GroupIDs)",
      "suppressionDuration": "P1D",
      "suppressionEnabled": true,
      "tactics": [
        "InitialAccess",
        "Persistence",
        "Discovery"
      ],
      "displayName": "TS-Guest accounts added in AAD Groups other than the ones specified",
      "enabled": true,
      "description": "Guest Accounts are added in the Organization Tenants to perform various tasks i.e projects execution, support etc.. This detection notifies when guest users are added to Azure AD Groups other than the ones specified and poses a risk to gain access to sensitive apps or data.",
      "alertRuleTemplateName": "6ab1f7b2-61b8-442f-bc81-96afe7ad8c53",
      "lastModifiedUtc": "2022-12-02T13:09:24.7808188Z",
      "name": "16c58f6c-0c20-4093-a5bd-ffcfbc160a32",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/16c58f6c-0c20-4093-a5bd-ffcfbc160a32",
      "kind": "Scheduled",
      "createIncident": null,
      "groupingConfiguration": null,
      "playbookName": ""
    },
    {
      "queryFrequency": "PT2H",
      "queryPeriod": "PT2H",
      "triggerOperator": "GreaterThan",
      "triggerThreshold": 0,
      "eventGroupingSettings": {
        "aggregationKind": "SingleAlert"
      },
      "severity": "High",
      "query": "AuditLogs\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"ApplicationManagement\"\n| where AADOperationType =~ \"Assign\"\n| where ActivityDisplayName has_any (\"Add delegated permission grant\",\"Add app role assignment to service principal\")\n| mv-expand TargetResources\n| mv-expand TargetResources.modifiedProperties\n| extend displayName_ = tostring(TargetResources_modifiedProperties.displayName)\n| where displayName_ has_any (\"AppRole.Value\",\"DelegatedPermissionGrant.Scope\")\n| extend Permission = tostring(parse_json(tostring(TargetResources_modifiedProperties.newValue)))\n| where Permission has \"RoleManagement.ReadWrite.Directory\"\n| extend InitiatingApp = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| extend Initiator = iif(isnotempty(InitiatingApp), InitiatingApp, tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName))\n| extend Target = tostring(parse_json(tostring(TargetResources.modifiedProperties[4].newValue)))\n| extend TargetId = iif(displayName_ =~ 'DelegatedPermissionGrant.Scope',\n  tostring(parse_json(tostring(TargetResources.modifiedProperties[2].newValue))),\n  tostring(parse_json(tostring(TargetResources.modifiedProperties[3].newValue))))\n| summarize by bin(TimeGenerated, 1h), OperationName, Initiator, Target, TargetId, Result",
      "suppressionDuration": "PT5H",
      "suppressionEnabled": false,
      "tactics": [
        "Persistence",
        "Impact"
      ],
      "displayName": "Azure AD Role Management Permission Grant",
      "enabled": true,
      "description": "Identifies when the Microsoft Graph RoleManagement.ReadWrite.Directory (Delegated or Application) permission is granted to a service principal.\nThis permission allows an application to read and manage the role-based access control (RBAC) settings for your company's directory.\nAn adversary could use this permission to add an Azure AD object to an Admin directory role and escalate privileges.\nRef : https://docs.microsoft.com/graph/permissions-reference#role-management-permissions\nRef : https://docs.microsoft.com/graph/api/directoryrole-post-members?view=graph-rest-1.0&tabs=http",
      "alertRuleTemplateName": "1ff56009-db01-4615-8211-d4fda21da02d",
      "lastModifiedUtc": "2022-12-02T14:41:18.7411906Z",
      "name": "4ad6b001-7388-4e8f-a762-7b69f01359f6",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/4ad6b001-7388-4e8f-a762-7b69f01359f6",
      "kind": "Scheduled",
      "createIncident": null,
      "groupingConfiguration": null,
      "playbookName": ""
    },
    {
      "queryFrequency": "P1D",
      "queryPeriod": "P1D",
      "triggerOperator": "GreaterThan",
      "triggerThreshold": 0,
      "eventGroupingSettings": {
        "aggregationKind": "SingleAlert"
      },
      "severity": "Medium",
      "query": "//Adjust this threshold to fit environment\nlet signin_threshold = 5; \n//Make a list of IPs with failed Windows host logins above threshold\nlet win_fails = \nSecurityEvent\n| where EventID == 4625\n| where LogonType in (10, 7, 3)\n| where IpAddress != \"-\"\n| summarize count() by IpAddress\n| where count_ > signin_threshold\n| summarize make_list(IpAddress);\nlet wef_fails =\nWindowsEvent\n| where EventID == 4625\n| extend LogonType = tostring(EventData.LogonType)\n| where LogonType in (10, 7, 3)\n| extend IpAddress = tostring(EventData.IpAddress)\n| where IpAddress != \"-\"\n| summarize count() by IpAddress\n| where count_ > signin_threshold\n| summarize make_list(IpAddress);\n//Make a list of IPs with failed *nix host logins above threshold\nlet nix_fails = \nSyslog\n| where Facility contains 'auth' and ProcessName != 'sudo' and SyslogMessage has 'from' and not(SyslogMessage has_any ('Disconnecting', 'Disconnected', 'Accepted', 'disconnect', @'[preauth]'))\n| extend SourceIP = extract(\"(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.(([0-9]{1,3})))\",1,SyslogMessage)\n| where SourceIP != \"\" and SourceIP != \"127.0.0.1\"\n| summarize count() by SourceIP\n| where count_ > signin_threshold\n| summarize make_list(SourceIP);\n//See if any of the IPs with failed host logins hve had a sucessful Azure AD login\nlet aadFunc = (tableName:string){\ntable(tableName)\n| where ResultType in (\"0\", \"50125\", \"50140\")\n| where IPAddress in (win_fails) or IPAddress in (nix_fails) or IPAddress in (wef_fails)\n| extend Reason=  \"Multiple failed host logins from IP address with successful Azure AD login\"\n| extend timestamp = TimeGenerated, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress, Type = Type\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt",
      "suppressionDuration": "PT5H",
      "suppressionEnabled": false,
      "tactics": [
        "InitialAccess",
        "CredentialAccess"
      ],
      "displayName": "TS-Failed host logons but success logon to AzureAD",
      "enabled": true,
      "description": "Identifies a list of IP addresses with a minimum number(default of 5) of failed logon attempts to remote hosts.\nUses that list to identify any successful logons to Azure Active Directory from these IPs within the same timeframe.",
      "alertRuleTemplateName": "1ce5e766-26ab-4616-b7c8-3b33ae321e80",
      "lastModifiedUtc": "2022-12-02T14:54:00.5511755Z",
      "name": "400a8ed2-bd71-4099-a6b1-8cec9d78c418",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/400a8ed2-bd71-4099-a6b1-8cec9d78c418",
      "kind": "Scheduled",
      "createIncident": null,
      "groupingConfiguration": null,
      "playbookName": ""
    },
    {
      "queryFrequency": "PT30M",
      "queryPeriod": "PT30M",
      "triggerOperator": "GreaterThan",
      "triggerThreshold": 0,
      "eventGroupingSettings": {
        "aggregationKind": "SingleAlert"
      },
      "severity": "Low",
      "query": "let timeRange = ago(1d);\nlet threshold = 0;\nSigninLogs\n| where TimeGenerated >= timeRange\n| where ConditionalAccessStatus == 1 or ConditionalAccessStatus =~ \"failure\"\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser \n| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\n| extend ConditionalAccessPol0Name = tostring(ConditionalAccessPolicies[0].displayName)\n| extend ConditionalAccessPol1Name = tostring(ConditionalAccessPolicies[1].displayName)\n| extend ConditionalAccessPol2Name = tostring(ConditionalAccessPolicies[2].displayName)\n| extend Status = strcat(StatusCode, \": \", ResultDescription) \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Status = makelist(Status), StatusDetails = makelist(StatusDetails), IPAddresses = makelist(IPAddress), IPAddressCount = dcount(IPAddress) , CorrelationIds = makelist(CorrelationId) by UserPrincipalName, AppDisplayName, tostring(Browser), tostring(OS), Location, ConditionalAccessPol0Name, ConditionalAccessPol1Name, ConditionalAccessPol2Name\n| where IPAddressCount > threshold and StatusDetails !has \"MFA successfully completed\"\n| mvexpand IPAddresses, Status, StatusDetails, CorrelationIds\n| extend Status = strcat(Status, \" \", StatusDetails)\n| summarize IPAddresses = makeset(IPAddresses), Status = makeset(Status), CorrelationIds = makeset(CorrelationIds) by StartTimeUtc, EndTimeUtc, UserPrincipalName, AppDisplayName, tostring(Browser), tostring(OS), Location, ConditionalAccessPol0Name, ConditionalAccessPol1Name, ConditionalAccessPol2Name, IPAddressCount\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName, IPCustomEntity = tostring(IPAddresses)",
      "suppressionDuration": "PT5H",
      "suppressionEnabled": false,
      "tactics": [
        "InitialAccess",
        "Persistence"
      ],
      "displayName": "TS-Attempt to bypass conditional access rule in Azure AD",
      "enabled": true,
      "description": "Identifies an attempt to Bypass conditional access rule(s) in Azure Active Directory.\nThe ConditionalAccessStatus column value details if there was an attempt to bypass Conditional Access\nor if the Conditional access rule was not satisfied (ConditionalAccessStatus == 1).\nReferences: \nhttps://docs.microsoft.com/azure/active-directory/conditional-access/overview\nhttps://docs.microsoft.com/azure/active-directory/reports-monitoring/concept-sign-ins\nhttps://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\nConditionalAccessStatus == 0 // Success\nConditionalAccessStatus == 1 // Failure\nConditionalAccessStatus == 2 // Not Applied\nConditionalAccessStatus == 3 // unknown",
      "alertRuleTemplateName": "3af9285d-bb98-4a35-ad29-5ea39ba0c628",
      "lastModifiedUtc": "2022-12-02T14:54:00.5866541Z",
      "name": "97782dd2-673b-4d29-bd7e-6fbbf7344cb3",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/97782dd2-673b-4d29-bd7e-6fbbf7344cb3",
      "kind": "Scheduled",
      "createIncident": null,
      "groupingConfiguration": null,
      "playbookName": ""
    },
    {
      "queryFrequency": "P1D",
      "queryPeriod": "P1D",
      "triggerOperator": "GreaterThan",
      "triggerThreshold": 0,
      "eventGroupingSettings": {
        "aggregationKind": "SingleAlert"
      },
      "severity": "Medium",
      "query": "//Adjust this threshold to fit the environment\nlet signin_threshold = 5;\n//Make a list of all IPs with failed signins to AAD above our threshold\nlet aadFunc = (tableName:string){\nlet suspicious_signins =\ntable(tableName)\n| where ResultType !in (\"0\", \"50125\", \"50140\")\n| where IPAddress !in ('127.0.0.1', '::1')\n| summarize count() by IPAddress\n| where count_ > signin_threshold\n| summarize make_set(IPAddress);\n//See if any of these IPs have sucessfully logged into *nix hosts\nlet linux_logons =\nSyslog\n| where Facility contains \"auth\" and ProcessName != \"sudo\"\n| where SyslogMessage has \"Accepted\"\n| extend SourceIP = extract(\"(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.(([0-9]{1,3})))\",1,SyslogMessage)\n| where SourceIP in (suspicious_signins)\n| extend Reason = \"Multiple failed AAD logins from IP address\"\n| project TimeGenerated, Computer, HostIP, IpAddress = SourceIP, SyslogMessage, Facility, ProcessName, Reason;\n//See if any of these IPs have sucessfully logged into Windows hosts\nlet win_logons = (union isfuzzy=true\n(SecurityEvent\n| where EventID == 4624\n| where LogonType in (10, 7, 3)\n| where IpAddress != \"-\"\n| where IpAddress in (suspicious_signins)\n| extend Reason = \"Multiple failed AAD logins from IP address\"\n| project TimeGenerated, Account, AccountType, Computer, Activity, EventID, LogonProcessName, IpAddress, LogonTypeName, TargetUserSid, Reason\n),\n(WindowsEvent\n| where EventID == 4624 and has_any_ipv4(EventData, toscalar(suspicious_signins))\n| extend LogonType = tostring(EventData.LogonType)\n| where LogonType in (10, 7, 3)\n| extend  IpAddress = tostring(EventData.IpAddress)\n| where IpAddress != \"-\"\n| where IpAddress in (suspicious_signins)\n| extend Reason = \"Multiple failed AAD logins from IP address\"\n| extend Activity = \"4624 - An account was successfully logged on.\"\n| extend Account =  strcat(tostring(EventData.TargetDomainName),\"\\\\\", tostring(EventData.TargetUserName))\n| extend TargetUserSid = tostring(EventData.TargetUserSid)\n| extend TargetAccount = strcat(EventData.TargetDomainName,\"\\\\\", EventData.TargetUserName)\n| extend AccountType =case(Account endswith \"$\" or TargetUserSid in (\"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\"), \"Machine\", isempty(TargetUserSid), \"\", \"User\")\n| extend LogonProcessName = tostring(EventData.LogonProcessName)\n| project TimeGenerated, Account, AccountType, Computer, Activity, EventID, LogonProcessName, IpAddress, TargetUserSid, Reason\n)\n);\nunion isfuzzy=true linux_logons,win_logons\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, IPCustomEntity = IpAddress, HostCustomEntity = Computer\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt",
      "suppressionDuration": "PT5H",
      "suppressionEnabled": false,
      "tactics": [
        "InitialAccess",
        "CredentialAccess"
      ],
      "displayName": "TS-Failed AzureAD logons but success logon to host",
      "enabled": true,
      "description": "Identifies a list of IP addresses with a minimum number (default of 5) of failed logon attempts to Azure Active Directory.\nUses that list to identify any successful remote logons to hosts from these IPs within the same timeframe.",
      "alertRuleTemplateName": "8ee967a2-a645-4832-85f4-72b635bcb3a6",
      "lastModifiedUtc": "2022-12-02T14:54:00.5600989Z",
      "name": "b9e481e0-2895-4f7b-bc45-ce5c78d0f3eb",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/b9e481e0-2895-4f7b-bc45-ce5c78d0f3eb",
      "kind": "Scheduled",
      "createIncident": null,
      "groupingConfiguration": null,
      "playbookName": ""
    },
    {
      "queryFrequency": "PT5M",
      "queryPeriod": "PT10M",
      "triggerOperator": "GreaterThan",
      "triggerThreshold": 0,
      "eventGroupingSettings": {
        "aggregationKind": "SingleAlert"
      },
      "severity": "Medium",
      "query": "let timeframe = 1d;\nlet threshold = 0;\nSigninLogs\n| where TimeGenerated >= ago(timeframe)\n| where ResultType == \"50057\"\n| where ResultDescription =~ \"User account is disabled. The account has been disabled by an administrator.\"\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count(), applicationCount = dcount(AppDisplayName), \napplicationSet = makeset(AppDisplayName) by UserPrincipalName, IPAddress\n| where applicationCount >= threshold\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress",
      "suppressionDuration": "PT5H",
      "suppressionEnabled": false,
      "tactics": [
        "InitialAccess"
      ],
      "displayName": "Attempts to sign in to disabled accounts",
      "enabled": true,
      "description": "Identifies failed attempts to sign in to disabled accounts across multiple Azure Applications.\nDefault threshold for Azure Applications attempted to sign in to is 3.\nReferences: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\n50057 - User account is disabled. The account has been disabled by an administrator.",
      "alertRuleTemplateName": "75ea5c39-93e5-489b-b1e1-68fa6c9d2d04",
      "lastModifiedUtc": "2023-09-15T20:08:39.8902921Z",
      "name": "06dbc4ea-9f23-4cb8-a9c7-8378684fa09b",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/06dbc4ea-9f23-4cb8-a9c7-8378684fa09b",
      "kind": "Scheduled",
      "createIncident": null,
      "groupingConfiguration": null,
      "playbookName": ""
    },
    {
      "queryFrequency": "P1D",
      "queryPeriod": "P14D",
      "triggerOperator": "GreaterThan",
      "triggerThreshold": 0,
      "eventGroupingSettings": {
        "aggregationKind": "SingleAlert"
      },
      "severity": "Medium",
      "query": "//The bigger the window the better the data sample size, as we use IP prevalence, more sample data is better.\n//The minimum number of countries that the account has been accessed from [default: 2]\nlet minimumCountries = 2;\n//The delta (%) between the largest in-use IP and the smallest [default: 95]\nlet deltaThreshold = 95;\n//The maximum (%) threshold that the country appears in login data [default: 10]\nlet countryPrevalenceThreshold = 10;\n//The time to project forward after the last login activity [default: 60min]\nlet projectedEndTime = 60m;\nlet queryfrequency = 1d;\nlet queryperiod = 14d;\nlet aadFunc = (tableName: string) {\n    // Get successful signins to Teams\n    let signinData =\n        table(tableName)\n        | where TimeGenerated > ago(queryperiod)\n        | where AppDisplayName has \"Teams\" and ConditionalAccessStatus =~ \"success\"\n        | extend Country = tostring(todynamic(LocationDetails)['countryOrRegion'])\n        | where isnotempty(Country) and isnotempty(IPAddress);\n    // Calculate prevalence of countries\n    let countryPrevalence =\n        signinData\n        | summarize CountCountrySignin = count() by Country\n        | extend TotalSignin = toscalar(signinData | summarize count())\n        | extend CountryPrevalence = toreal(CountCountrySignin) / toreal(TotalSignin) * 100;\n    // Count signins by user and IP address\n    let userIpSignin =\n        signinData\n        | summarize CountIPSignin = count(), Country = any(Country), ListSigninTimeGenerated = make_list(TimeGenerated) by IPAddress, UserPrincipalName;\n    // Calculate delta between the IP addresses with the most and minimum activity by user\n    let userIpDelta =\n        userIpSignin\n        | summarize MaxIPSignin = max(CountIPSignin), MinIPSignin = min(CountIPSignin), DistinctCountries = dcount(Country), make_set(Country) by UserPrincipalName\n        | extend UserIPDelta = toreal(MaxIPSignin - MinIPSignin) / toreal(MaxIPSignin) * 100;\n    // Collect Team operations the user account has performed within a time range of the suspicious signins\n    OfficeActivity\n    | where TimeGenerated > ago(queryfrequency)\n    | where Operation in~ (\"TeamsAdminAction\", \"MemberAdded\", \"MemberRemoved\", \"MemberRoleChanged\", \"AppInstalled\", \"BotAddedToTeam\")\n    | project OperationTimeGenerated = TimeGenerated, UserId = tolower(UserId), Operation\n    | join kind = inner(\n        userIpDelta\n        // Check users with activity from distinct countries\n        | where DistinctCountries >= minimumCountries\n        // Check users with high IP delta\n        | where UserIPDelta >= deltaThreshold\n        // Add information about signins and countries\n        | join kind = leftouter userIpSignin on UserPrincipalName\n        | join kind = leftouter countryPrevalence on Country\n        // Check activity that comes from nonprevalent countries\n        | where CountryPrevalence < countryPrevalenceThreshold\n        | project\n            UserPrincipalName,\n            SuspiciousIP = IPAddress,\n            UserIPDelta,\n            SuspiciousSigninCountry = Country,\n            SuspiciousCountryPrevalence = CountryPrevalence,\n            EventTimes = ListSigninTimeGenerated\n    ) on $left.UserId == $right.UserPrincipalName\n    // Check the signins occured 60 min before the Teams operations\n    | mv-expand SigninTimeGenerated = EventTimes\n    | extend SigninTimeGenerated = todatetime(SigninTimeGenerated)\n    | where OperationTimeGenerated between (SigninTimeGenerated .. (SigninTimeGenerated + projectedEndTime))\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n| summarize arg_max(SigninTimeGenerated, *) by UserPrincipalName, SuspiciousIP, OperationTimeGenerated\n| summarize\n    ActivitySummary = make_bag(pack(tostring(SigninTimeGenerated), pack(\"Operation\", tostring(Operation), \"OperationTime\", OperationTimeGenerated)))\n    by UserPrincipalName, SuspiciousIP, SuspiciousSigninCountry, SuspiciousCountryPrevalence\n| extend IPCustomEntity = SuspiciousIP, AccountCustomEntity = UserPrincipalName",
      "suppressionDuration": "PT5H",
      "suppressionEnabled": false,
      "tactics": [
        "InitialAccess",
        "Persistence"
      ],
      "displayName": "TS-Anomalous login followed by Teams action",
      "enabled": true,
      "description": "Detects anomalous IP address usage by user accounts and then checks to see if a suspicious Teams action is performed.\nQuery calculates IP usage Delta for each user account and selects accounts where a delta >= 90% is observed between the most and least used IP.\nTo further reduce results the query performs a prevalence check on the lowest used IP's country, only keeping IP's where the country is unusual for the tenant (dynamic ranges)\nFinally the user accounts activity within Teams logs is checked for suspicious commands (modifying user privileges or admin actions) during the period the suspicious IP was active.",
      "alertRuleTemplateName": "2b701288-b428-4fb8-805e-e4372c574786",
      "lastModifiedUtc": "2022-12-02T14:54:06.2184186Z",
      "name": "ff93a360-5314-4992-9000-680117e2a4fe",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/ff93a360-5314-4992-9000-680117e2a4fe",
      "kind": "Scheduled",
      "createIncident": null,
      "groupingConfiguration": null,
      "playbookName": ""
    },
    {
      "queryFrequency": "PT5M",
      "queryPeriod": "PT5M",
      "triggerOperator": "GreaterThan",
      "triggerThreshold": 0,
      "eventGroupingSettings": {
        "aggregationKind": "SingleAlert"
      },
      "severity": "Medium",
      "query": "let logonDiff = 10m;\nlet aadFunc = (tableName:string){\ntable(tableName) \n| where ResultType == \"0\" \n| where AppDisplayName !in (\"Skype for Business Online\")\n//remove the exception for office365 \"Office 365 Exchange Online\"\n| project SuccessLogonTime = TimeGenerated, UserPrincipalName, SuccessIPAddress = IPAddress, AppDisplayName, SuccessIPBlock = strcat(split(IPAddress, \".\")[0], \".\", split(IPAddress, \".\")[1]), Type\n| join kind= inner (\n    table(tableName)\n    | where ResultType !in (\"0\", \"50140\") \n    | where ResultDescription !~ \"Other\"  \n    | where AppDisplayName !in (\"Skype for Business Online\")\n    //remove the exception for office365 \"Office 365 Exchange Online\",\n    | project FailedLogonTime = TimeGenerated, UserPrincipalName, FailedIPAddress = IPAddress, AppDisplayName, ResultType, ResultDescription, Type\n) on UserPrincipalName, AppDisplayName \n| where SuccessLogonTime < FailedLogonTime and FailedLogonTime - SuccessLogonTime <= logonDiff and FailedIPAddress !startswith SuccessIPBlock\n| summarize FailedLogonTime = max(FailedLogonTime), SuccessLogonTime = max(SuccessLogonTime) by UserPrincipalName, SuccessIPAddress, AppDisplayName, FailedIPAddress, ResultType, ResultDescription, Type\n| extend timestamp = SuccessLogonTime\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt",
      "suppressionDuration": "PT5H",
      "suppressionEnabled": false,
      "tactics": [
        "CredentialAccess",
        "InitialAccess"
      ],
      "displayName": "TS-Successful logon from IP and failure from a different IP - Testing",
      "enabled": true,
      "description": "Identifies when a user account successfully logs onto an Azure App from one IP and within 10 mins failed to logon to the same App via a different IP.\nThis may indicate a malicious attempt at password guessing based on knowledge of the users account.",
      "alertRuleTemplateName": "02ef8d7e-fc3a-4d86-a457-650fa571d8d2",
      "lastModifiedUtc": "2022-12-02T14:54:02.3019952Z",
      "name": "ea52e2ba-d1fb-4f17-a651-05742aac99b7",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/ea52e2ba-d1fb-4f17-a651-05742aac99b7",
      "kind": "Scheduled",
      "createIncident": null,
      "groupingConfiguration": null,
      "playbookName": ""
    },
    {
      "queryFrequency": "P1D",
      "queryPeriod": "P1D",
      "triggerOperator": "GreaterThan",
      "triggerThreshold": 0,
      "eventGroupingSettings": {
        "aggregationKind": "SingleAlert"
      },
      "severity": "High",
      "query": "let Alert1 = \nSecurityAlert\n| where AlertName == \"Unfamiliar sign-in properties\"\n| extend UserPrincipalName = tostring(parse_json(ExtendedProperties).[\"User Account\"])\n| extend Alert1Time = TimeGenerated\n| extend Alert1 = AlertName\n| extend Alert1Severity = AlertSeverity\n;\nlet Alert2 = \nSecurityAlert\n| where AlertName == \"Atypical travel\"\n| extend UserPrincipalName = tostring(parse_json(ExtendedProperties).[\"User Account\"])\n| extend Alert2Time = TimeGenerated\n| extend Alert2 = AlertName\n| extend Alert2Severity = AlertSeverity\n| extend CurrentLocation = strcat(tostring(parse_json(tostring(parse_json(Entities)[2].Location)).CountryCode), \"|\", tostring(parse_json(tostring(parse_json(Entities)[2].Location)).State), \"|\", tostring(parse_json(tostring(parse_json(Entities)[2].Location)).City))\n| extend PreviousLocation = strcat(tostring(parse_json(tostring(parse_json(Entities)[3].Location)).CountryCode), \"|\", tostring(parse_json(tostring(parse_json(Entities)[3].Location)).State), \"|\", tostring(parse_json(tostring(parse_json(Entities)[3].Location)).City))\n| extend CurrentIPAddress = tostring(parse_json(Entities)[2].Address)\n| extend PreviousIPAddress = tostring(parse_json(Entities)[3].Address)\n;\nAlert1\n| join kind=inner Alert2 on UserPrincipalName\n| where abs(datetime_diff('minute', Alert1Time, Alert2Time)) <=10\n| extend TimeDelta = Alert1Time - Alert2Time\n| project UserPrincipalName, Alert1, Alert1Time, Alert1Severity, Alert2, Alert2Time, Alert2Severity, TimeDelta, CurrentLocation, PreviousLocation, CurrentIPAddress, PreviousIPAddress\n| extend AccountCustomEntity = UserPrincipalName\n| extend IPCustomEntity = CurrentIPAddress",
      "suppressionDuration": "PT5H",
      "suppressionEnabled": false,
      "tactics": [
        "InitialAccess"
      ],
      "displayName": "TS-Correlate Unfamiliar sign-in properties and atypical travel alerts",
      "enabled": true,
      "description": "The combination of an Unfamiliar sign-in properties alert and an Atypical travel alert about the same user within a +10m or -10m window is considered a high severity incident.",
      "alertRuleTemplateName": "a3df4a32-4805-4c6d-8699-f3c888af2f67",
      "lastModifiedUtc": "2023-09-29T21:59:57.5807912Z",
      "name": "2c73b98c-8b64-4613-a5c4-849af1efbd00",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/2c73b98c-8b64-4613-a5c4-849af1efbd00",
      "kind": "Scheduled",
      "createIncident": null,
      "groupingConfiguration": null,
      "playbookName": ""
    },
    {
      "queryFrequency": "PT5M",
      "queryPeriod": "PT5M",
      "triggerOperator": "GreaterThan",
      "triggerThreshold": 0,
      "eventGroupingSettings": {
        "aggregationKind": "SingleAlert"
      },
      "severity": "Medium",
      "query": "datatable(\n    user: string,\n    ip1: string,\n    ip2: string,\n    host: string,\n    filehash: string,\n    url: string\n)[\n    \"TU1@TELUSsecurityDev.onmicrosoft.com\", \"142.63.18.145\", \"142.174.178.243\", \"win11-add\", \"57a0ba0158324694abfb3f12b98707d6c1e289ad62d0e4314a904972d490b37f\", \"https://www.blurbshop.com\",\n    \"TU2@TELUSsecurityDev.onmicrosoft.com\", \"142.63.18.146\", \"142.174.178.244\", \"vm01\", \"57a0ba0158324694abfb3f12b98707d6c1e289ad62d0e4314a904972d490b37f\", \"https://www.blurbshop.com\"\n]\n",
      "suppressionDuration": "PT5H",
      "suppressionEnabled": false,
      "tactics": [],
      "displayName": "ts-triggeralert",
      "enabled": true,
      "description": "",
      "alertRuleTemplateName": null,
      "lastModifiedUtc": "2023-11-30T17:51:13.4988334Z",
      "name": "c4f23722-ce8f-4bc8-ab89-3b170e28436f",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/c4f23722-ce8f-4bc8-ab89-3b170e28436f",
      "kind": "Scheduled",
      "createIncident": null,
      "groupingConfiguration": null,
      "playbookName": ""
    },
    {
      "queryFrequency": "PT5M",
      "queryPeriod": "PT5M",
      "triggerOperator": "GreaterThan",
      "triggerThreshold": 0,
      "eventGroupingSettings": {
        "aggregationKind": "SingleAlert"
      },
      "severity": "Medium",
      "query": "SigninLogs \r\n| where UserPrincipalName == \"telusallpower@telussecuritydev.onmicrosoft.com\"\r\n| where Status.errorCode == 0\r\n",
      "suppressionDuration": "PT5H",
      "suppressionEnabled": false,
      "tactics": [],
      "displayName": "TS-PowerUser Successful Signin_c",
      "enabled": true,
      "description": "",
      "alertRuleTemplateName": null,
      "lastModifiedUtc": "2023-10-03T21:21:50.4097323Z",
      "name": "85b77269-2358-40f4-85ee-5a8bf44a82a3",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/85b77269-2358-40f4-85ee-5a8bf44a82a3",
      "kind": "Scheduled",
      "createIncident": null,
      "groupingConfiguration": null,
      "playbookName": ""
    },
    {
      "queryFrequency": "PT5M",
      "queryPeriod": "PT5M",
      "triggerOperator": "GreaterThan",
      "triggerThreshold": 0,
      "eventGroupingSettings": {
        "aggregationKind": "SingleAlert"
      },
      "severity": "Medium",
      "query": "AuditLogs \r\n| where OperationName == \"Add eligible member to role\"\r\n| where Category == \"RoleManagement\"\r\n| where Result == \"success\"\r\n| where TargetResources contains \"global\"\r\n| project targetUsr =  TargetResources[0].userPrincipalName",
      "suppressionDuration": "PT5H",
      "suppressionEnabled": false,
      "tactics": [
        "CredentialAccess",
        "PrivilegeEscalation"
      ],
      "displayName": "TS-Create Alert When a user is assigned to global admin role",
      "enabled": true,
      "description": "Create Alert When a user is assigned to global admin role",
      "alertRuleTemplateName": null,
      "lastModifiedUtc": "2023-01-16T16:53:03.8681128Z",
      "name": "e378107c-e16a-455d-98ab-41843d240c08",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/e378107c-e16a-455d-98ab-41843d240c08",
      "kind": "Scheduled",
      "createIncident": null,
      "groupingConfiguration": null,
      "playbookName": ""
    },
    {
      "queryFrequency": "PT5M",
      "queryPeriod": "PT5M",
      "triggerOperator": "GreaterThan",
      "triggerThreshold": 0,
      "eventGroupingSettings": {
        "aggregationKind": "SingleAlert"
      },
      "severity": "Medium",
      "query": "let timeRange=ago(7d);\r\nSigninLogs\r\n| where TimeGenerated >= timeRange\r\n| where AppDisplayName contains \"Azure Portal\"\r\n// 50126 - Invalid username or password, or invalid on-premises username or password.\r\n// 50020? - The user doesn't exist in the tenant.\r\n| where ResultType in ( \"50126\" , \"50020\", \"50140\")\r\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser\r\n| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\r\n| extend State = tostring(LocationDetails.state), City = tostring(LocationDetails.city)\r\n| extend PortalUrl = \"https://portal.azure.com\"\r\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), IPAddresses = makeset(IPAddress), DistinctIPCount = dcount(IPAddress),  makeset(OS), makeset(Browser), makeset(City), AttemptCount = count()  by UserDisplayName, UserPrincipalName, AppDisplayName, ResultType, ResultDescription, StatusCode, StatusDetails, Location, State, IPAddress, PortalUrl\r\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName\r\n| sort by AttemptCount",
      "suppressionDuration": "PT5H",
      "suppressionEnabled": false,
      "tactics": [],
      "displayName": "TS-Portal SignIn Error",
      "enabled": true,
      "description": "",
      "alertRuleTemplateName": null,
      "lastModifiedUtc": "2023-01-16T18:32:40.4391259Z",
      "name": "f50b6950-2bcb-463a-9f3e-a2fbf08fa5ec",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/f50b6950-2bcb-463a-9f3e-a2fbf08fa5ec",
      "kind": "Scheduled",
      "createIncident": null,
      "groupingConfiguration": null,
      "playbookName": ""
    },
    {
      "queryFrequency": "P1D",
      "queryPeriod": "P1D",
      "triggerOperator": "GreaterThan",
      "triggerThreshold": 0,
      "eventGroupingSettings": {
        "aggregationKind": "SingleAlert"
      },
      "severity": "Medium",
      "query": "let timeBin = 10m;\nlet failedThreshold = 100;\nW3CIISLog\n| where scStatus in (\"401\",\"403\")\n| where csUserName != \"-\"\n// Handling Exchange specific items in IIS logs to remove the unique log identifier in the URI\n| extend csUriQuery = iff(csUriQuery startswith \"MailboxId=\", tostring(split(csUriQuery, \"&\")[0]) , csUriQuery )\n| extend csUriQuery = iff(csUriQuery startswith \"X-ARR-CACHE-HIT=\", strcat(tostring(split(csUriQuery, \"&\")[0]),tostring(split(csUriQuery, \"&\")[1])) , csUriQuery )\n| extend scStatusFull = strcat(scStatus, \".\",scSubStatus) \n// Map common IIS codes\n| extend scStatusFull_Friendly = case(\nscStatusFull == \"401.0\", \"Access denied.\",\nscStatusFull == \"401.1\", \"Logon failed.\",\nscStatusFull == \"401.2\", \"Logon failed due to server configuration.\",\nscStatusFull == \"401.3\", \"Unauthorized due to ACL on resource.\",\nscStatusFull == \"401.4\", \"Authorization failed by filter.\",\nscStatusFull == \"401.5\", \"Authorization failed by ISAPI/CGI application.\",\nscStatusFull == \"403.0\", \"Forbidden.\",\nscStatusFull == \"403.4\", \"SSL required.\",\n\"See - https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0\")\n// Mapping to Hex so can be mapped using website in comments above\n| extend scWin32Status_Hex = tohex(tolong(scWin32Status)) \n// Map common win32 codes\n| extend scWin32Status_Friendly = case(\nscWin32Status_Hex =~ \"775\", \"The referenced account is currently locked out and cannot be logged on to.\",\nscWin32Status_Hex =~ \"52e\", \"Logon failure: Unknown user name or bad password.\",\nscWin32Status_Hex =~ \"532\", \"Logon failure: The specified account password has expired.\",\nscWin32Status_Hex =~ \"533\", \"Logon failure: Account currently disabled.\", \nscWin32Status_Hex =~ \"2ee2\", \"The request has timed out.\", \nscWin32Status_Hex =~ \"0\", \"The operation completed successfully.\", \nscWin32Status_Hex =~ \"1\", \"Incorrect function.\", \nscWin32Status_Hex =~ \"2\", \"The system cannot find the file specified.\", \nscWin32Status_Hex =~ \"3\", \"The system cannot find the path specified.\", \nscWin32Status_Hex =~ \"4\", \"The system cannot open the file.\", \nscWin32Status_Hex =~ \"5\", \"Access is denied.\", \nscWin32Status_Hex =~ \"8009030e\", \"SEC_E_NO_CREDENTIALS\", \nscWin32Status_Hex =~ \"8009030C\", \"SEC_E_LOGON_DENIED\", \n\"See - https://msdn.microsoft.com/library/cc231199.aspx\")\n// decode URI when available\n| extend decodedUriQuery = url_decode(csUriQuery)\n// Count of failed logons by a user\n| summarize makeset(decodedUriQuery), makeset(cIP), makeset(sSiteName), makeset(sPort), makeset(csUserAgent), makeset(csMethod), makeset(csUriQuery), makeset(scStatusFull), makeset(scStatusFull_Friendly), makeset(scWin32Status_Hex), makeset(scWin32Status_Friendly), FailedConnectionsCount = count() by bin(TimeGenerated, timeBin), csUserName, Computer, sIP\n| where FailedConnectionsCount >= failedThreshold\n| project TimeGenerated, csUserName, set_decodedUriQuery, Computer, set_sSiteName, sIP, set_cIP, set_sPort, set_csUserAgent, set_csMethod, set_scStatusFull, set_scStatusFull_Friendly, set_scWin32Status_Hex, set_scWin32Status_Friendly, FailedConnectionsCount\n| order by FailedConnectionsCount\n| extend timestamp = TimeGenerated, AccountCustomEntity = csUserName, HostCustomEntity = Computer",
      "suppressionDuration": "PT5H",
      "suppressionEnabled": false,
      "tactics": [
        "CredentialAccess"
      ],
      "displayName": "High count of failed logons by a user",
      "enabled": true,
      "description": "Identifies when 100 or more failed attempts by a given user in 10 minutes occur on the IIS Server.\nThis could be indicative of attempted brute force based on known account information.\nThis could also simply indicate a misconfigured service or device. \nReferences:\nIIS status code mapping - https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0\nWin32 Status code mapping - https://msdn.microsoft.com/library/cc231199.aspx",
      "alertRuleTemplateName": "884c4957-70ea-4f57-80b9-1bca3890315b",
      "lastModifiedUtc": "2023-01-16T20:03:31.4509321Z",
      "name": "7433bad4-51a8-41a1-96b1-720f9d7416f0",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/7433bad4-51a8-41a1-96b1-720f9d7416f0",
      "kind": "Scheduled",
      "createIncident": null,
      "groupingConfiguration": null,
      "playbookName": ""
    },
    {
      "queryFrequency": "PT5M",
      "queryPeriod": "PT5M",
      "triggerOperator": "GreaterThan",
      "triggerThreshold": 0,
      "eventGroupingSettings": {
        "aggregationKind": "SingleAlert"
      },
      "severity": "Medium",
      "query": "AzureActivity\r\n  | where OperationName == 'Delete Virtual Machine'\r\n  | where ActivityStatus == 'Accepted'\r\n  | extend AccountCustomEntity = Caller\r\n  | extend IPCustomEntity = CallerIpAddress",
      "suppressionDuration": "PT5H",
      "suppressionEnabled": false,
      "tactics": [
        "InitialAccess"
      ],
      "displayName": "TS-Delete Virtual Machines",
      "enabled": true,
      "description": "Delete Virtual Machines",
      "alertRuleTemplateName": null,
      "lastModifiedUtc": "2023-04-10T12:05:00.2505502Z",
      "name": "3f2c66b3-02cb-405f-b9a7-10e89f81d1f5",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/3f2c66b3-02cb-405f-b9a7-10e89f81d1f5",
      "kind": "Scheduled",
      "createIncident": null,
      "groupingConfiguration": null,
      "playbookName": ""
    },
    {
      "queryFrequency": "PT5H",
      "queryPeriod": "PT5H",
      "triggerOperator": "GreaterThan",
      "triggerThreshold": 0,
      "eventGroupingSettings": {
        "aggregationKind": "SingleAlert"
      },
      "severity": "Medium",
      "query": "AuditLogs\r\n| where TimeGenerated >ago(7d)\r\n| where OperationName == \"Add User\"\r\n| project AddedTime = TimeGenerated, user= tostring(TargetResources[0].userPrincipalName)\r\n| join (AzureActivity\r\n| where OperationName == \"Create Role assignement\"\r\n| project OperationName, RoleAssignmentTime = TimeGenerated, user= Caller) on user\r\n| project-away user1",
      "suppressionDuration": "PT5H",
      "suppressionEnabled": false,
      "tactics": [],
      "displayName": "TS-audit newUser",
      "enabled": true,
      "description": "",
      "alertRuleTemplateName": null,
      "lastModifiedUtc": "2023-04-12T09:07:58.2826617Z",
      "name": "f284d334-8d86-4eb4-b196-5cb178317ad4",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/f284d334-8d86-4eb4-b196-5cb178317ad4",
      "kind": "Scheduled",
      "createIncident": null,
      "groupingConfiguration": null,
      "playbookName": ""
    },
    {
      "queryFrequency": "PT1H",
      "queryPeriod": "PT1H",
      "triggerOperator": "GreaterThan",
      "triggerThreshold": 0,
      "eventGroupingSettings": {
        "aggregationKind": "SingleAlert"
      },
      "severity": "Low",
      "query": "AuditLogs\n| where AADOperationType =~ \"Delete\"\n| where Result == \"success\"\n| extend type_ = tostring(TargetResources[0].type)\n| extend targetuserPrincipalName_ = tostring(TargetResources[0].userPrincipalName)\n| extend targetdisplayName = tostring(TargetResources[0].displayName)\n| extend InitiatedByActionUserInformation = iff(isnotempty(InitiatedBy.user.userPrincipalName), InitiatedBy.user.userPrincipalName, InitiatedBy.app.displayName)\n| extend targetusrInformation = iff(targetuserPrincipalName_ != \"\", substring(tostring(TargetResources[0].userPrincipalName), toint(strlen(tostring(TargetResources[0].id))) - countof(tostring(TargetResources[0].id), '-')), targetdisplayName)\n| project targetusrInformation, type_, InitiatedByActionUserInformation\n\n",
      "suppressionDuration": "PT5H",
      "suppressionEnabled": false,
      "tactics": [
        "InitialAccess"
      ],
      "displayName": "TS-deleteOpsPerformed_c",
      "enabled": true,
      "description": "Delete operations performed in your Microsoft Sentinel workspace",
      "alertRuleTemplateName": null,
      "lastModifiedUtc": "2023-08-24T11:29:40.1706677Z",
      "name": "1be417af-b10c-4615-b04c-ad600a4bb4bf",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/1be417af-b10c-4615-b04c-ad600a4bb4bf",
      "kind": "Scheduled",
      "createIncident": null,
      "groupingConfiguration": null,
      "playbookName": ""
    },
    {
      "queryFrequency": "PT10M",
      "queryPeriod": "P1D",
      "triggerOperator": "GreaterThan",
      "triggerThreshold": 0,
      "eventGroupingSettings": {
        "aggregationKind": "SingleAlert"
      },
      "severity": "High",
      "query": "let queryfrequency = 10m;\nlet queryperiod = 2h;\nAuditLogs\n| where TimeGenerated > ago(queryfrequency)\n| where OperationName =~ \"Delete user\"\n//extend UserPrincipalName = tostring(TargetResources[0].userPrincipalName)\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type == \"User\"\n      | extend UserPrincipalName = extract(@'([a-f0-9]{32})?(.*)', 2, tostring(TargetResource.userPrincipalName))\n  )\n| extend DeletedByUser = tostring(InitiatedBy.user.userPrincipalName), DeletedByIPAddress = tostring(InitiatedBy.user.ipAddress)\n| extend DeletedByApp = tostring(InitiatedBy.app.displayName)\n| project Deletion_TimeGenerated = TimeGenerated, UserPrincipalName, DeletedByUser, DeletedByIPAddress, DeletedByApp, Deletion_AdditionalDetails = AdditionalDetails, Deletion_InitiatedBy = InitiatedBy, Deletion_TargetResources = TargetResources\n| join kind=inner (\n    AuditLogs\n    | where TimeGenerated > ago(queryperiod)\n    | where OperationName =~ \"Add user\"      \n    | mv-apply TargetResource = TargetResources on \n      (\n          where TargetResource.type == \"User\"\n          | extend UserPrincipalName = trim(@'\"',tostring(TargetResource.userPrincipalName))\n      )\n    | project-rename Creation_TimeGenerated = TimeGenerated\n) on UserPrincipalName\n| extend TimeDelta = Deletion_TimeGenerated - Creation_TimeGenerated\n| where  TimeDelta between (time(0s) .. queryperiod)\n| extend CreatedByUser = tostring(InitiatedBy.user.userPrincipalName), CreatedByIPAddress = tostring(InitiatedBy.user.ipAddress)\n| extend CreatedByApp = tostring(InitiatedBy.app.displayName)\n| project Creation_TimeGenerated, Deletion_TimeGenerated, TimeDelta, UserPrincipalName, DeletedByUser, DeletedByIPAddress, DeletedByApp, CreatedByUser, CreatedByIPAddress, CreatedByApp, Creation_AdditionalDetails = AdditionalDetails, Creation_InitiatedBy = InitiatedBy, Creation_TargetResources = TargetResources, Deletion_AdditionalDetails, Deletion_InitiatedBy, Deletion_TargetResources\n| extend timestamp = Deletion_TimeGenerated, Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])\n",
      "suppressionDuration": "PT1H",
      "suppressionEnabled": false,
      "tactics": [
        "InitialAccess"
      ],
      "displayName": "Account Created and Deleted in Short Timeframe",
      "enabled": true,
      "description": "Search for user principal name (UPN) events. Look for accounts created and then deleted in under 24 hours. Attackers may create an account for their use, and then remove the account when no longer needed.\nRef : https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-user-accounts#short-lived-account",
      "alertRuleTemplateName": "bb616d82-108f-47d3-9dec-9652ea0d3bf6",
      "lastModifiedUtc": "2023-09-15T20:01:39.5785181Z",
      "name": "849b64ff-2742-4cd1-9aa5-bef589570dfe",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/849b64ff-2742-4cd1-9aa5-bef589570dfe",
      "kind": "Scheduled",
      "createIncident": null,
      "groupingConfiguration": null,
      "playbookName": ""
    },
    {
      "queryFrequency": "PT5H",
      "queryPeriod": "PT5H",
      "triggerOperator": "GreaterThan",
      "triggerThreshold": 0,
      "eventGroupingSettings": {
        "aggregationKind": "SingleAlert"
      },
      "severity": "Medium",
      "query": "Heartbeat\n//| where TimeGenerated >= ago(24h) //Set lookback period\n| summarize LastHeartbeat=arg_max(TimeGenerated, *) by Computer\n//Set offline criteria\n| extend Alive = case (LastHeartbeat >= now(-1h), 'No', 'Yes')\n//Calculate minutes since last heartbeat \n| extend MinutesSilent = datetime_diff('minute', now(), LastHeartbeat)\n| where Alive == 'No'\n| where Computer has \"vm01\"\n| project\n    Computer,\n    ComputerIP,\n    OSType,\n    Alive,\n    LastHeartbeat,\n    MinutesSilent,\n    ComputerEnvironment \n\n",
      "suppressionDuration": "PT5H",
      "suppressionEnabled": false,
      "tactics": [],
      "displayName": "AgentHeartBeatMissed",
      "enabled": true,
      "description": "",
      "alertRuleTemplateName": null,
      "lastModifiedUtc": "2023-10-26T20:16:42.8477139Z",
      "name": "717ec7f2-064e-4358-ba0e-b81aa2fcc2be",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/717ec7f2-064e-4358-ba0e-b81aa2fcc2be",
      "kind": "Scheduled",
      "createIncident": null,
      "groupingConfiguration": null,
      "playbookName": ""
    },
    {
      "queryFrequency": "PT12H",
      "queryPeriod": "PT12H",
      "triggerOperator": "GreaterThan",
      "triggerThreshold": 0,
      "eventGroupingSettings": {
        "aggregationKind": "SingleAlert"
      },
      "severity": "High",
      "query": "workspace(\"/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/wksp-ws-01/providers/Microsoft.OperationalInsights/workspaces/wksp-la\").AzureActivity\r\n| take 1\r\n| summarize Count=count() by Type, OperationNameValue, Level",
      "suppressionDuration": "PT5H",
      "suppressionEnabled": false,
      "tactics": [
        "Reconnaissance"
      ],
      "displayName": "TS-Cross Workspace Query-WkspLA",
      "enabled": true,
      "description": "Cross workspace query test",
      "alertRuleTemplateName": null,
      "lastModifiedUtc": "2023-12-08T21:22:59.8650381Z",
      "name": "61f767b0-ebc7-418c-9a59-cc91b8e0d3da",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/61f767b0-ebc7-418c-9a59-cc91b8e0d3da",
      "kind": "Scheduled",
      "createIncident": null,
      "groupingConfiguration": null,
      "playbookName": ""
    },
    {
      "queryFrequency": "PT1H",
      "queryPeriod": "PT1H",
      "triggerOperator": "GreaterThan",
      "triggerThreshold": 0,
      "eventGroupingSettings": {
        "aggregationKind": "SingleAlert"
      },
      "severity": "High",
      "query": "workspace(\"/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/wksp-ws-01/providers/Microsoft.OperationalInsights/workspaces/wksp-la\").AzureActivity\r\n| take 1\r\n| summarize Countb=count() by Type, OperationNameValue, Level",
      "suppressionDuration": "PT5H",
      "suppressionEnabled": false,
      "tactics": [
        "Reconnaissance"
      ],
      "displayName": "TS-Cross Workspace Query 2-WkspLA",
      "enabled": true,
      "description": "Cross workspace query test",
      "alertRuleTemplateName": null,
      "lastModifiedUtc": "2023-12-11T16:00:59.0028538Z",
      "name": "337c1d7c-79cc-43b2-a3d7-8a45511ae811",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/337c1d7c-79cc-43b2-a3d7-8a45511ae811",
      "kind": "Scheduled",
      "createIncident": null,
      "groupingConfiguration": null,
      "playbookName": ""
    },
    {
      "queryFrequency": "PT2H",
      "queryPeriod": "PT2H",
      "triggerOperator": "GreaterThan",
      "triggerThreshold": 0,
      "eventGroupingSettings": {
        "aggregationKind": "SingleAlert"
      },
      "severity": "High",
      "query": "workspace(\"/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/wksp-ws-01/providers/Microsoft.OperationalInsights/workspaces/wksp-la\").AzureActivity\r\n| take 1\r\n| summarize Counta=count() by Type, OperationNameValue, Level",
      "suppressionDuration": "PT5H",
      "suppressionEnabled": false,
      "tactics": [
        "Reconnaissance"
      ],
      "displayName": "TS-Cross Workspace Query 3-WkspLA",
      "enabled": true,
      "description": "Cross workspace query test",
      "alertRuleTemplateName": null,
      "lastModifiedUtc": "2023-12-11T16:00:24.7942776Z",
      "name": "14a46b04-c973-4be4-95f3-837f360f51aa",
      "id": "/subscriptions/26613501-ed23-4f10-8aed-bd633914579d/resourceGroups/sales-rg/providers/Microsoft.OperationalInsights/workspaces/salesla/providers/Microsoft.SecurityInsights/alertRules/14a46b04-c973-4be4-95f3-837f360f51aa",
      "kind": "Scheduled",
      "createIncident": null,
      "groupingConfiguration": null,
      "playbookName": ""
    }
  ]
}
